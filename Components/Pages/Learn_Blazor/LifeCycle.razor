@page "/lifecycle"

@using System.Threading

<PageTitle>Life Cycle</PageTitle>

<h3 class="text-success">Blazor LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button> <br />

@count <button @onclick=StartCountDown>Start Countdown</button>

<div class="border">
    <_LifeCycleChildComponent CountValue ="@currentCount"></_LifeCycleChildComponent>
</div>

@foreach (var item in EventType)
{
    <p>@item</p>
    <hr />
}

@code {
    private int currentCount = 0;
    private int count = 5;

    // a Log of all events that has been clicked
    List<String> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1500);
        EventType.Add("OnInitializedAsync is called");
    }

    // This is always called before OnInitializedAsync, even if there is no delay in OnInitalizedAsync
    protected override void OnInitialized()
    {        
        EventType.Add("OnInitialized is called");
    }

    //
    protected override void OnParametersSet()
    {
        EventType.Add("OnParameter is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1500);
        EventType.Add("OnParameterAsync is called");
    }

    // These methods are invoked only after the UI is rendered
    protected override void OnAfterRender(bool firstRender)
    {
        // I could use firstRender to do something, and then do something else the next time its rendered
        if (firstRender)
        {
            currentCount = 1_00; // 100 set with underscore syntax
        }
        else
        {
            currentCount = 2_00;
        }
        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(1500);
        EventType.Add("OnAfterRenderAsync is called");
    }

    // Will not update the UI if it return false - This Method is also called by StateHasChanged()
    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    
    // 
    void StartCountDown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 3000);
    }

    void TimeCallBack(object state)
    {
        if (count > 0)
        {
            count--;

            // Will be called only after all other Lifecycle Methods has been called
            // Will Re Render the UI if the state has changed (the count var has changed)
            // IT will call ShouldRender to check if it should rerender
            InvokeAsync(StateHasChanged);
        }          
    }
}
