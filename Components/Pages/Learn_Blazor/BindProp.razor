@page "/learnblazor/bindprop"

<div class="row">
    <div class="col-6" border p-3>
        <h3 class="text-primary">Product Playground</h3>
        Name : @Product.Name
        <br />
        IsActive : @Product.IsActive
        <br />
        @* Using tenerary operator  *@
        This Product is :@(Product.IsActive ? "Active" : "Inactive")
        <br />
        IsActive :
        <input type="checkbox" @bind-value="@Product.IsActive" checked="@(Product.IsActive?"checked":null)" />
        <br />
        <br />
        Product Properties:
        <select @bind="selectedProp">
            @foreach (var prop in Product.ProductProperties)
            {
                <option value="@prop.Key">@prop.Key</option>
            }
        </select>
        <br />
        SelectedProp: @selectedProp
        @if (!string.IsNullOrEmpty(selectedProp))
        {
            <p>Selected Value: @Product.ProductProperties.FirstOrDefault(u => u.Key == selectedProp).Value</p>
        }
        <br />
        <br />
    </div>
    <div class="col-6" border p-3>
        <h3 class="text-primary">Example - One Way Data Binding</h3>
        <h3>Display value of property from the code. Can not update the value, from the display</h3>

        Name : @Product.Name
        <br />
        IsActive : @Product.IsActive
        <br />
        Price : @Product.PriceOneWayBind
        <br />
        <br />
        <br />
        
        <h3>Example - Two Way Data Binding. Does not update before user leave input field</h3>
        <h3>Display value of property from the code. Can update the value, but not imidiatly</h3>
        Price : @Product.PriceTwoWayBind
        <br />
        Input Price
        <input type="number" @bind-value="@Product.PriceTwoWayBind" />

        <br />
        <br />
        <br />
        <h3>Example - Two Way Data Binding With Imidiate Update</h3>
        <h3>With event handlers - There are different event handlers, to trigger when the input will update</h3>
        <h3>Display value of property from the code. Can update the value, imidiatly</h3>
        Price : @Product.PriceTwoWayBindUpdating
        <br />
        Input Price
        <input type="number" @bind="@Product.PriceTwoWayBindUpdating" @bind:event="oninput" />
        <br />
        <br />
    </div>
    <div class="col-12 p4">
        <h2 class="text-success">Product Table</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <td>Product Name</td>
                    <td>Price</td>
                    <td>Is Active</td>
                </tr>
            </thead>
            <tbody>
                @foreach(var prod in ProductList)
                {
                    <tr>
                        <td><input type="text" @bind="@prod.Name" @bind:event="oninput" /></td>
                        <td><input type="number" @bind="@prod.PriceTwoWayBindUpdating" @bind:event="oninput" /></td>
                        <td><input type="checkbox" @bind="@prod.IsActive" /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <h1>Product Summary</h1>
        <br />
        @foreach(var prod in ProductList)
        {
            <p>@prod.Name [@prod.PriceTwoWayBindUpdating] is @(prod.IsActive?"Active":"InActive")</p>            
        }
    </div>
</div>


@code {
    private string selectedProp = "";

    // Initialising a single Product
    Product Product = new()
        {
            Id = 1,
            Name = "Product1",
            IsActive = true,
            PriceOneWayBind = 1,
            PriceTwoWayBind = 5,
            PriceTwoWayBindUpdating = 50,
            ProductProperties = new List<Product_Prop>()
            {
                new Product_Prop{Id=1, Key="Color", Value = "Red"},
                new Product_Prop{Id=2, Key="Size", Value = "20oz"},
                new Product_Prop{Id=3, Key="Flavor", Value = "Rose"},
            }
        };

    List<Product> ProductList = new();

    // Lifecycle event that is called when this class is initialized -
    // Here I could populate the ProductList with Products from a DB, or API
    protected override void OnInitialized()
    {
        ProductList.Add(new()
            {
                Id = 1,
                Name = "Midnight Blaze",
                IsActive = false,
                PriceTwoWayBindUpdating = 5.99,
                ProductProperties = new List<Product_Prop>()
                {
                    new Product_Prop { Id = 1, Key = "Flavor", Value = "Rose"},
                    new Product_Prop { Id = 2, Key = "Size", Value = "20oz"},
                    new Product_Prop { Id = 3, Key = "Color", Value="Purple" }
                }
            });

        ProductList.Add(new()
            {
                Id = 2,
                Name = "Blossom Lily",
                IsActive = true,
                PriceTwoWayBindUpdating = 5.99,
                ProductProperties = new List<Product_Prop>()
                {
                    new Product_Prop { Id = 1, Key = "Flavor", Value = "Lily" },
                    new Product_Prop { Id = 2, Key = "Size", Value = "18oz" },
                    new Product_Prop { Id = 3,Key = "Color",Value = "White"}
                }
            });
    }


}
