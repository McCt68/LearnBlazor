<div class="bg-light border col-6" @onclick="(args)=>SelectedProductUpdated(args, Product.Name)">
    <h4 class="text-secondary">Product - @Product.Id</h4>

    @* onChange basically calls a method from parent component, via EventCall1back*@ 
    <input type="checkbox" @onchange="FavoriteUpdated"/> Add to Favorites <br />

    Name - @Product.Name <br />
    Show Properties :
    <input type="checkbox" @bind="Product.IsActive" />

    @if (Product.IsActive)
    {
        @foreach (var prodProp in Product.ProductProperties)
        {
            <p>@prodProp.Key - @prodProp.Value </p>
        }
    }
    <br />
    @* Using a shared component as a delete button *@
    @* Passing the parameters down to the child, by providing values for the attributtes *@
    <_DeleteButtonComponent ProductId="@Product.Id">

    </_DeleteButtonComponent>
</div>

@code {
    [Parameter] // Can use this as an atributte in parent that uses this child component
    public Product Product { get; set; }

    // EventCallBack used when i want to use a method from the parrent component -
    // And invoke it in the child component
    [Parameter] // References the method from the parent component
    public EventCallback<bool> OnFavoriteUpdated { get; set; }

    // This parameter is used to establish a callback mechanism between -
    // the child component and its parent component. 
    // It allows the child component to notify the parent component when a -
    // specific product is selected, passing the product's identifier (a string) as an argument.
    [Parameter]
    public EventCallback<string>OnSelectedProductChange {get; set;}

    private async Task FavoriteUpdated(ChangeEventArgs args)
    {
        await OnFavoriteUpdated.InvokeAsync((bool)(args.Value??false));
    }

    //asignment 7
    private async Task SelectedProductUpdated(MouseEventArgs args, string productName)
    {
        await OnSelectedProductChange.InvokeAsync(productName);
    }
}
